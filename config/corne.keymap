/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>


#define DEFAULT 0
#define SYM     1
#define NAV     2
#define NUM     3
#define WIN     4
#define MSE     5

&lt {
  quick_tap_ms = <200>;
};

/ {
    behaviors {
      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      hs: homerow_mods_slow {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_SLOW";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      hf: homerow_mods_fast {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_FAST";
        #binding-cells = <2>;
        tapping-term-ms = <110>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      bhm: balanced_homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          tapping-term-ms = <125>;    // <---[[moderate duration is 200]]
          quick-tap-ms = <0>;
          flavor = "balanced";
          bindings = <&kp>, <&kp>;
      };
    };

    combos {
      compatible = "zmk,combos";

      combo_capsword {
        timeout-ms = <50>;
        key-positions = <13 16>;
        bindings = <&caps_word>;
      };
    };

    macros {
      ball_speed: ball_speed {
        label = "ball_speed";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp CAPS &kp CAPS &kp NUM &kp NUM>
            ;
      };
    };
};

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    keymap {
      compatible = "zmk,keymap";

      default_layer {
        bindings = <
          &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SQT
          &bhm LCTRL A &bhm LALT R &bhm LGUI S &bhm LSHFT T &kp G   &kp M &bhm RSHFT N  &bhm RGUI E &bhm LALT I &bhm RCTRL O
          &lt NUM Z  &kp X &kp C  &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &lt WIN FSLH
                        &mo NUM &lt SYM ESC &lt NAV BSPC &lt NAV SPACE &lt MSE RET &mo WIN
        >;
      };

      sym_layer {
        bindings = <
          &kp EXCL  &kp AT   &kp LBRC &kp RBRC &kp PIPE       &kp AMPS &kp ASTRK &kp LT  &kp GT  &kp SQT
          &kp HASH  &kp DLLR &kp LPAR &kp RPAR &kp GRAVE      &kp MINUS &kp EQUAL &kp PLUS &kp UNDER &kp SEMI
          &kp PRCNT &kp CARET &kp LBKT &kp RBKT &kp TILDE     &kp BSLH &kp COLON &kp COMMA &kp DOT &kp FSLH
                        &trans       &trans      &trans       &trans         &trans   &trans
        >;
      };

      nav_layer {
        bindings = <
          &none     &none     &none     &none     &none         &none &kp PG_UP &kp UP &none &kp INS
          &kp LCTRL &kp LALT  &kp LGUI  &kp LSHFT &none         &kp HOME &kp LEFT &kp DOWN &kp RIGHT &kp END
          &kp LG(Z) &kp LG(X) &kp LG(C) &kp K_APP &kp LG(V)     &kp LS(LC(TAB)) &kp PG_DN &none &none &kp LC(TAB)
                        &trans       &trans      &kp DEL       &kp TAB        &trans     &trans
        >;
      };

      num_layer {
        bindings = <
          &kp F1    &kp F2    &kp F3    &kp F4    &none         &none     &kp N7    &kp N8    &kp N9    &kp N0
          &kp F5    &kp F6    &kp F7    &kp F8    &none         &none     &kp N4    &kp N5    &kp N6    &none
          &kp F9    &kp F10   &kp F11   &kp F12   &none         &none     &kp N1    &kp N2    &kp N3    &none
                        &trans      &trans      &trans          &none     &kp N0    &none
        >;
      };

      win_layer {
        bindings = <
          &bt BT_CLR &none &kp C_VOL_UP &none &bt BT_SEL 0                    &none &kp LG(EQUAL) &kp LC(LA(UP)) &kp LC(LA(EQUAL)) &none
          &none &kp C_PREV &kp C_PP &kp C_NEXT &bt BT_SEL 1                   &kp LS(LG(N5)) &kp LC(LA(LEFT)) &kp LC(LA(DOWN)) &kp LC(LA(RIGHT)) &kp LC(LA(RET))
          &none &none &kp C_VOL_DN &kp C_MUTE &bt BT_SEL 2                    &none &kp LG(MINUS) &none &kp LC(LA(MINUS)) &none
                          &trans     &trans      &trans       &trans        &trans      &trans
        >;
      };

      mse_layer {
        bindings = <
          &none     &none &mmv MOVE_UP &none     &none         &ball_speed     &msc SCRL_UP    &none     &none     &none
          &none     &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none         &msc SCRL_LEFT &mkp MB1 &mkp MB2 &mkp MB2 &msc SCRL_RIGHT
          &none     &none     &none     &none     &none         &none     &msc SCRL_DOWN    &none     &none     &none
                                &trans    &kp LCTRL &kp LSHFT     &trans    &trans   &trans
        >;
      };
   };
};
